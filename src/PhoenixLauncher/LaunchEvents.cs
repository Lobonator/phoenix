using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Diagnostics;
using Microsoft.Win32;
using PhoenixLauncher.Data;

namespace PhoenixLauncher
{
    class LaunchEvents
    {
        public const string LoaderDll = "Native.dll";

        public static void SaveLoginCfg(string ultimaDir, string address)
        {
            if (address == null) throw new ArgumentNullException("address");
            if (ultimaDir == null) throw new ArgumentNullException("ultimaDir");

            string loginPath = Path.Combine(ultimaDir, "login.cfg");
            string backupPath = loginPath + ".backup";

            if (File.Exists(loginPath))
            {
                File.Delete(backupPath);
                File.Move(loginPath, backupPath);
            }

            StreamWriter writer = new StreamWriter(loginPath);
            writer.WriteLine("; login.cfg");
            writer.WriteLine("; generated by Phoenix Launcher");
            writer.WriteLine("; made by Mikee The Wanderer");
            writer.WriteLine("LoginServer=" + address);
            writer.Close();
        }

        public static bool SaveUoCfg(Server server, Account account)
        {
            if (server.IsEmpty) throw new ArgumentException("Empty server informations.", "server");

            string cfgPath = Path.Combine(server.UltimaDir, "uo.cfg");
            string backupPath = cfgPath + ".backup";

            FileInfo cfgFile = new FileInfo(cfgPath);
            if (!cfgFile.Exists) return false;

            StreamReader reader = cfgFile.OpenText();

            StringBuilder newCfg = new StringBuilder();

            while (!reader.EndOfStream)
            {
                string line = reader.ReadLine();

                if (account.Name != null && line.StartsWith("AcctID", StringComparison.InvariantCultureIgnoreCase)) continue;
                if (account.Password != null && line.StartsWith("AcctPassword", StringComparison.InvariantCultureIgnoreCase)) continue;
                if (line.StartsWith("RememberAcctPW", StringComparison.InvariantCultureIgnoreCase)) continue;

                newCfg.AppendLine(line);
            }

            if (account.Name != null) newCfg.AppendLine("AcctID=" + account.Name);

            if (account.Password != null)
            {
                string encryptedPwd = UOEncryption.PasswordEncryption.Encrypt(account.Password);
                newCfg.AppendLine("AcctPassword=" + encryptedPwd);
            }

            newCfg.AppendLine("RememberAcctPW=on");

            reader.Close();

            File.Delete(backupPath);
            cfgFile.MoveTo(backupPath);

            StreamWriter writer = new StreamWriter(cfgPath);
            writer.Write(newCfg.ToString());
            writer.Close();

            return true;
        }

        public static bool UpdateRegistry(string ultimaDir, bool forceUpdate)
        {
            //bool updated = false;

            try
            {
                RegistryKey rkey3D = Registry.LocalMachine.OpenSubKey(@"Software\Origin Worlds Online\Ultima Online Third Dawn\1.0", true);
                RegistryKey rkey2D = Registry.LocalMachine.OpenSubKey(@"Software\Origin Worlds Online\Ultima Online\1.0", true);

                if (forceUpdate || rkey3D == null)
                {
                    Trace.TraceInformation("Writing new registry");
                    if (rkey3D == null)
                    {
                        rkey3D = Registry.LocalMachine.CreateSubKey(@"Software\Origin Worlds Online\Ultima Online Third Dawn\1.0");
                    }

                    rkey3D.SetValue("ExePath", Path.Combine(ultimaDir, "uotd.exe"));
                    rkey3D.SetValue("InstCDPath", ultimaDir);
                    rkey3D.SetValue("PatchExePath", Path.Combine(ultimaDir, "uopatch.exe"));
                    rkey3D.SetValue("StartExePath", Path.Combine(ultimaDir, "uo.exe"));
                    rkey3D.SetValue("Upgraded", "yes");

                    //updated = true;
                }

                if (forceUpdate || rkey2D == null)
                {
                    Trace.TraceInformation("Writing old registry.");

                    if (rkey2D == null)
                    {
                        rkey2D = Registry.LocalMachine.CreateSubKey(@"Software\Origin Worlds Online\Ultima Online\1.0");
                    }

                    rkey2D.SetValue("ExePath", Path.Combine(ultimaDir, "client.exe"));
                    rkey2D.SetValue("InstCDPath", ultimaDir);
                    rkey2D.SetValue("PatchExePath", Path.Combine(ultimaDir, "uopatch.exe"));
                    rkey2D.SetValue("StartExePath", Path.Combine(ultimaDir, "uo.exe"));
                    rkey2D.SetValue("Upgraded", "yes");

                    //updated = true;
                }
            }
            catch (Exception)
            {
            }

            return true;
        }

        public static void PatchClient(IntPtr hProcess, IntPtr hThread)
        {
            uint patchBase = (uint)Api.VirtualAllocEx(hProcess, (IntPtr)0, 4096, AllocationType.MEM_COMMIT, MemoryProtection.PAGE_EXECUTE_READWRITE);

            if (patchBase == 0)
                patchBase = 0x400400;

            FileInfo phoenixDll = new FileInfo(Path.Combine(Constants.PhoenixDir, LoaderDll));

            if (!phoenixDll.Exists)
                throw new Exception(String.Format("Unable to find file {0}.", phoenixDll.FullName));
            
            bool allOk = true;

            CONTEXT ctx = new CONTEXT();
            ctx.ContextFlags = ContextFlags.CONTEXT_FULL;
            allOk &= Api.GetThreadContext(hThread, ref ctx);

            uint writenBytes;
            allOk &= Api.WriteProcessMemory(hProcess, (IntPtr)(patchBase + 0x100), Encoding.ASCII.GetBytes(phoenixDll.FullName), (uint)phoenixDll.FullName.Length + 1, out writenBytes);

            allOk &= pokeb(hProcess, patchBase, 0x9c);				// pushfd
            allOk &= pokeb(hProcess, patchBase + 1, 0x60);				// pushad
            allOk &= pokeb(hProcess, patchBase + 2, 0x68);				// push "address of dll path"
            allOk &= poked(hProcess, patchBase + 3, patchBase + 0x100);

            allOk &= pokeb(hProcess, patchBase + 7, 0xe8);				// call LoadLibraryA
            allOk &= poked(hProcess, patchBase + 8, (uint)(Api.GetProcAddress(Api.GetModuleHandle("kernel32"), "LoadLibraryA")) - (patchBase + 7 + 5)); // Note thi is relative call

            allOk &= pokeb(hProcess, patchBase + 12, 0x61);				// popad
            allOk &= pokeb(hProcess, patchBase + 13, 0x9d);				// popfd

            allOk &= pokeb(hProcess, patchBase + 14, 0xe9);				// jmp OldEIP
            allOk &= poked(hProcess, patchBase + 15, ctx.Eip - (patchBase + 14 + 5));

            ctx.Eip = patchBase;
            allOk &= Api.SetThreadContext(hThread, ref ctx);

            if (!allOk) throw new Exception(String.Format("Unable to patch client in memory. Error number = 0x{0}.", Api.GetLastError().ToString("X")));
        }

        #region pokeb and poked

        private static bool pokeb(IntPtr hProcess, uint addr, byte b)
        {
            uint count;
            return Api.WriteProcessMemory(hProcess, (IntPtr)addr, new byte[] { b }, 1, out count);
        }

        private static bool poked(IntPtr hProcess, uint addr, uint d)
        {
            uint count;
            return Api.WriteProcessMemory(hProcess, (IntPtr)addr, BitConverter.GetBytes(d), 4, out count);
        }

        #endregion
    }
}
